{"ast":null,"code":"import { call, put, takeLatest, all } from 'redux-saga/effects';\nimport ShopActionTypes from './shop.types';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.util';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.action';\nexport function* fetchCollectionsAsync() {\n  try {\n    const collectionRef = firestore.collection('collection');\n    const snapshot = yield collectionRef.get();\n    const collectionMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n    yield put(fetchCollectionsSuccess(collectionMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  }\n}\nexport function* fetchCollectionsStart() {\n  yield takeLatest(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["D:/react_Practice/crwnshop/src/redux/shop/shop.sagas.js"],"names":["call","put","takeLatest","all","ShopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","fetchCollectionsAsync","collectionRef","collection","snapshot","get","collectionMap","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,UAApB,EAA+BC,GAA/B,QAAyC,oBAAzC;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,8BAA3D;AACA,SAASC,uBAAT,EAAkCC,uBAAlC,QAAiE,eAAjE;AAEA,OAAO,UAAUC,qBAAV,GAAiC;AAEpC,MAAI;AACA,UAAMC,aAAa,GAAGL,SAAS,CAACM,UAAV,CAAqB,YAArB,CAAtB;AACA,UAAMC,QAAQ,GAAE,MAAMF,aAAa,CAACG,GAAd,EAAtB;AACA,UAAMC,aAAa,GAAG,MAAMd,IAAI,CAACM,+BAAD,EAAkCM,QAAlC,CAAhC;AACA,UAAMX,GAAG,CAACM,uBAAuB,CAACO,aAAD,CAAxB,CAAT;AAEH,GAND,CAME,OAAOC,KAAP,EAAc;AACZ,UAAMd,GAAG,CAACO,uBAAuB,CAACO,KAAK,CAACC,OAAP,CAAxB,CAAT;AAEH;AACJ;AAED,OAAO,UAAUC,qBAAV,GAAiC;AACpC,QAAMf,UAAU,CACZE,eAAe,CAACc,uBADJ,EAEZT,qBAFY,CAAhB;AAIH","sourcesContent":["import { call, put, takeLatest,all} from 'redux-saga/effects'\r\nimport ShopActionTypes from './shop.types'\r\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.util';\r\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.action';\r\n\r\nexport function* fetchCollectionsAsync(){\r\n\r\n    try {\r\n        const collectionRef = firestore.collection('collection')\r\n        const snapshot= yield collectionRef.get()\r\n        const collectionMap = yield call(convertCollectionsSnapshotToMap, snapshot)\r\n        yield put(fetchCollectionsSuccess(collectionMap))\r\n        \r\n    } catch (error) {\r\n        yield put(fetchCollectionsFailure(error.message))\r\n        \r\n    }\r\n}\r\n\r\nexport function* fetchCollectionsStart(){\r\n    yield takeLatest(\r\n        ShopActionTypes.FETCH_COLLECTIONS_START,\r\n        fetchCollectionsAsync\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}