{"ast":null,"code":"import { takeLatest, put, call, all } from \"redux-saga/effects\";\nimport UserActionTypes from \"./user.types\";\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from \"../../firebase/firebase.util\";\nimport { signInSuccess, signInFailure } from \"./user.action\";\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapShot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapShot.id,\n      ...userSnapShot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOutStart() {}\nexport function* userSagas() {\n  yield 'Lets check';\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession)]);\n}","map":{"version":3,"sources":["D:/react_Practice/crwnshop/src/redux/user/user.sagas.js"],"names":["takeLatest","put","call","all","UserActionTypes","auth","googleProvider","createUserProfileDocument","getCurrentUser","signInSuccess","signInFailure","getSnapshotFromUserAuth","userAuth","userRef","userSnapShot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,GAA/B,QAA0C,oBAA1C;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAAQC,IAAR,EAAcC,cAAd,EAA8BC,yBAA9B,EAAyDC,cAAzD,QAA+E,8BAA/E;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA4C,eAA5C;AAGA,OAAO,UAAUC,uBAAV,CAAkCC,QAAlC,EAA2C;AAC9C,MAAG;AACH,UAAMC,OAAO,GAAE,MAAMX,IAAI,CAACK,yBAAD,EAA4BK,QAA5B,CAAzB;AACA,UAAME,YAAY,GAAE,MAAMD,OAAO,CAACE,GAAR,EAA1B;AACA,UAAMd,GAAG,CACLQ,aAAa,CAAC;AAAEO,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF,YAAY,CAACG,IAAb;AAA1B,KAAD,CADR,CAAT;AAGH,GANG,CAMF,OAAOC,KAAP,EAAc;AACZ,UAAMjB,GAAG,CAACS,aAAa,CAACQ,KAAD,CAAd,CAAT;AACH;AACA;AACD,OAAO,UAAUC,gBAAV,GAA8B;AACjC,MAAI;AACA,UAAM;AAACC,MAAAA;AAAD,QAAQ,MAAMf,IAAI,CAACgB,eAAL,CAAqBf,cAArB,CAApB;AACA,UAAMK,uBAAuB,CAACS,IAAD,CAA7B;AACH,GAHD,CAGE,OAAOF,KAAP,EAAc;AACZ,UAAMjB,GAAG,CAACS,aAAa,CAACQ,KAAD,CAAd,CAAT;AACH;AACJ;AACD,OAAO,UAAUI,eAAV,CAA0B;AAACC,EAAAA,OAAO,EAAE;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR;AAAV,CAA1B,EAAuD;AAC1D,MAAI;AACA,UAAM;AAACL,MAAAA;AAAD,QAAO,MAAMf,IAAI,CAACqB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAnB;AACA,UAAMd,uBAAuB,CAACS,IAAD,CAA7B;AACH,GAHD,CAGE,OAAOF,KAAP,EAAc;AACZ,UAAMjB,GAAG,CAACS,aAAa,CAACQ,KAAD,CAAd,CAAT;AACH;AACJ;AACD,OAAO,UAAUS,mBAAV,GAA+B;AAClC,MAAI;AACA,UAAMf,QAAQ,GAAE,MAAMJ,cAAc,EAApC;AACA,QAAG,CAACI,QAAJ,EAAa;AACb,UAAMD,uBAAuB,CAACC,QAAD,CAA7B;AACH,GAJD,CAIE,OAAOM,KAAP,EAAc;AACZ,UAAMjB,GAAG,CAACS,aAAa,CAACQ,KAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUU,mBAAV,GAAiC;AACpC,QAAM5B,UAAU,CAACI,eAAe,CAACyB,oBAAjB,EAAuCV,gBAAvC,CAAhB;AACH;AACD,OAAO,UAAUW,kBAAV,GAA8B;AACjC,QAAM9B,UAAU,CAACI,eAAe,CAAC2B,mBAAjB,EAAsCT,eAAtC,CAAhB;AACH;AACD,OAAO,UAAUU,kBAAV,GAA8B;AACjC,QAAMhC,UAAU,CAACI,eAAe,CAAC6B,kBAAjB,EAAoCN,mBAApC,CAAhB;AACH;AACD,OAAO,UAAUO,cAAV,GAA0B,CAEhC;AACD,OAAO,UAAUC,SAAV,GAAsB;AACzB,QAAO,YAAP;AACA,QAAMhC,GAAG,CAAC,CAACD,IAAI,CAAC0B,mBAAD,CAAL,EAA4B1B,IAAI,CAAC4B,kBAAD,CAAhC,EAAsD5B,IAAI,CAAC8B,kBAAD,CAA1D,CAAD,CAAT;AACH","sourcesContent":["import { takeLatest,put, call, all } from \"redux-saga/effects\";\r\nimport UserActionTypes from \"./user.types\";\r\nimport {auth, googleProvider ,createUserProfileDocument, getCurrentUser } from \"../../firebase/firebase.util\";\r\nimport { signInSuccess, signInFailure} from \"./user.action\";\r\n\r\n\r\nexport function* getSnapshotFromUserAuth(userAuth){\r\n    try{\r\n    const userRef= yield call(createUserProfileDocument, userAuth)\r\n    const userSnapShot= yield userRef.get()\r\n    yield put(\r\n        signInSuccess({ id: userSnapShot.id, ...userSnapShot.data()})\r\n    )\r\n} catch (error) {\r\n    yield put(signInFailure(error))\r\n}\r\n}\r\nexport function* signInWithGoogle () {\r\n    try {\r\n        const {user}= yield auth.signInWithPopup(googleProvider)\r\n        yield getSnapshotFromUserAuth(user)\r\n    } catch (error) {\r\n        yield put(signInFailure(error))\r\n    }\r\n}\r\nexport function* signInWithEmail({payload: {email, password}}){\r\n    try {\r\n        const {user}=yield auth.signInWithEmailAndPassword(email, password)\r\n        yield getSnapshotFromUserAuth(user)\r\n    } catch (error) {\r\n        yield put(signInFailure(error))\r\n    }\r\n}\r\nexport function* isUserAuthenticated(){\r\n    try {\r\n        const userAuth= yield getCurrentUser()\r\n        if(!userAuth)return\r\n        yield getSnapshotFromUserAuth(userAuth)\r\n    } catch (error) {\r\n        yield put(signInFailure(error))\r\n    }\r\n}\r\n\r\nexport function* onGoogleSignInStart () {\r\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\r\n}\r\nexport function* onEmailSignInStart(){\r\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail)\r\n}\r\nexport function* onCheckUserSession(){\r\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION,isUserAuthenticated)\r\n}\r\nexport function* onSignOutStart(){\r\n    \r\n}\r\nexport function* userSagas() {\r\n    yield ('Lets check')\r\n    yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession)])\r\n}"]},"metadata":{},"sourceType":"module"}