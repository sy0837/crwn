{"ast":null,"code":"import { takeEvery } from 'redux-saga/effects';\nimport ShopActionTypes from './shop.types';\nexport function* fetchCollectionsAsync() {\n  yield console.log(\"I am fired\");\n  const collectionRef = firestore.collection('collection');\n  dispatch(fetchCollectionsStart());\n  collectionRef.get().then(snapshot => {\n    const collectionMap = convertCollectionsSnapshotToMap(snapshot);\n    dispatch(fetchCollectionsSuccess(collectionMap));\n  }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["D:/react_Practice/crwnshop/src/redux/shop/shop.sagas.js"],"names":["takeEvery","ShopActionTypes","fetchCollectionsAsync","console","log","collectionRef","firestore","collection","dispatch","fetchCollectionsStart","get","then","snapshot","collectionMap","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","catch","error","fetchCollectionsFailure","message","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,oBAAxB;AACA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,UAAUC,qBAAV,GAAiC;AACpC,QAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;AACA,QAAMC,aAAa,GAAGC,SAAS,CAACC,UAAV,CAAqB,YAArB,CAAtB;AACAC,EAAAA,QAAQ,CAACC,qBAAqB,EAAtB,CAAR;AAEAJ,EAAAA,aAAa,CAACK,GAAd,GAAoBC,IAApB,CAAyBC,QAAQ,IAAI;AACjC,UAAMC,aAAa,GAAGC,+BAA+B,CAACF,QAAD,CAArD;AACAJ,IAAAA,QAAQ,CAACO,uBAAuB,CAACF,aAAD,CAAxB,CAAR;AACH,GAHD,EAGGG,KAHH,CAGSC,KAAK,IAAIT,QAAQ,CAACU,uBAAuB,CAACD,KAAK,CAACE,OAAP,CAAxB,CAH1B;AAIH;AAED,OAAO,UAAUV,qBAAV,GAAiC;AACpC,QAAMT,SAAS,CACXC,eAAe,CAACmB,uBADL,EAEXlB,qBAFW,CAAf;AAIH","sourcesContent":["import {takeEvery} from 'redux-saga/effects'\r\nimport ShopActionTypes from './shop.types'\r\n\r\nexport function* fetchCollectionsAsync(){\r\n    yield console.log(\"I am fired\");\r\n    const collectionRef = firestore.collection('collection')\r\n    dispatch(fetchCollectionsStart())\r\n\r\n    collectionRef.get().then(snapshot => {\r\n        const collectionMap = convertCollectionsSnapshotToMap(snapshot)\r\n        dispatch(fetchCollectionsSuccess(collectionMap))\r\n    }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\r\n}\r\n\r\nexport function* fetchCollectionsStart(){\r\n    yield takeEvery(\r\n        ShopActionTypes.FETCH_COLLECTIONS_START,\r\n        fetchCollectionsAsync\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}