{"ast":null,"code":"import ShopActionTypes from \"./shop.types\";\nimport { firestore, convertCollectionsSnapshotToMap } from \"../../firebase/firebase.util\";\nexport const fetchCollectionsStart = () => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_START\n});\nexport const fetchCollectionsSuccess = collectionsMap => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionsMap\n});\nexport const fetchCollectionsFailure = errorMessage => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n  payload: errorMessage\n});\nexport const fetchCollectionsStartAsync = () => {\n  return dispatch => {\n    const collectionRef = firestore.collection('collection');\n    dispatch(fetchCollectionsStart());\n    collectionRef.get().then(snapshot => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      dispatch(fetchCollectionsSuccess(collectionsMap));\n    }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n  };\n}; // export const fetchCollectionStart = () => ({\n//     type: ShopActionTypes.FETCH_COLLECTION_START,\n// })\n// export const fetchCollectionSuccess = collectionMap => ({\n//     type: ShopActionTypes.FETCH_COLLECTION_SUCCESS,\n//     payload: collectionMap\n// })\n// export const fetchCollectionFailure = errorMessage =>({\n//     type: ShopActionTypes.FETCH_COLLECTION_ERROR,\n//     payload: errorMessage\n// })\n// export const fetchCollectionStartAsync = () => {\n//     return dispatch => {\n//         const collectionRef = firestore.collection('collections')\n//         dispatch(fetchCollectionStart())\n//         collectionRef\n//         .get()\n//         .then(snapshot => {\n//             const collectionMap = convertCollectionsSnapshotToMap(snapshot)\n//             console.log(collectionMap);\n//             dispatch(fetchCollectionSuccess(collectionMap))\n//         }).catch(error =>dispatch(fetchCollectionFailure(error.message)))\n//     }\n// }","map":{"version":3,"sources":["D:/react_Practice/crwnshop/src/redux/shop/shop.action.js"],"names":["ShopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsStart","type","FETCH_COLLECTIONS_START","fetchCollectionsSuccess","collectionsMap","FETCH_COLLECTIONS_SUCCESS","payload","fetchCollectionsFailure","errorMessage","FETCH_COLLECTIONS_FAILURE","fetchCollectionsStartAsync","dispatch","collectionRef","collection","get","then","snapshot","catch","error","message"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AACA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,8BAA3D;AAIA,OAAO,MAAMC,qBAAqB,GAAG,OAAO;AACxCC,EAAAA,IAAI,EAAEJ,eAAe,CAACK;AADkB,CAAP,CAA9B;AAIL,OAAO,MAAMC,uBAAuB,GAAGC,cAAc,KAAK;AACxDH,EAAAA,IAAI,EAAEJ,eAAe,CAACQ,yBADkC;AAExDC,EAAAA,OAAO,EAAEF;AAF+C,CAAL,CAA9C;AAKP,OAAO,MAAMG,uBAAuB,GAAGC,YAAY,KAAK;AACtDP,EAAAA,IAAI,EAAEJ,eAAe,CAACY,yBADgC;AAEtDH,EAAAA,OAAO,EAAEE;AAF6C,CAAL,CAA5C;AAKP,OAAO,MAAME,0BAA0B,GAAG,MAAM;AAC9C,SAAOC,QAAQ,IAAI;AACjB,UAAMC,aAAa,GAAGd,SAAS,CAACe,UAAV,CAAqB,YAArB,CAAtB;AACAF,IAAAA,QAAQ,CAACX,qBAAqB,EAAtB,CAAR;AACAY,IAAAA,aAAa,CACVE,GADH,GAEGC,IAFH,CAEQC,QAAQ,IAAI;AAChB,YAAMZ,cAAc,GAAGL,+BAA+B,CAACiB,QAAD,CAAtD;AACAL,MAAAA,QAAQ,CAACR,uBAAuB,CAACC,cAAD,CAAxB,CAAR;AACD,KALH,EAMGa,KANH,CAMSC,KAAK,IAAIP,QAAQ,CAACJ,uBAAuB,CAACW,KAAK,CAACC,OAAP,CAAxB,CAN1B;AAOD,GAVD;AAWD,CAZM,C,CAcT;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA","sourcesContent":["import ShopActionTypes from \"./shop.types\";\r\nimport { firestore, convertCollectionsSnapshotToMap } from \"../../firebase/firebase.util\";\r\n\r\n\r\n\r\nexport const fetchCollectionsStart = () => ({\r\n    type: ShopActionTypes.FETCH_COLLECTIONS_START\r\n  });\r\n  \r\n  export const fetchCollectionsSuccess = collectionsMap => ({\r\n    type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\r\n    payload: collectionsMap\r\n  });\r\n  \r\n  export const fetchCollectionsFailure = errorMessage => ({\r\n    type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\r\n    payload: errorMessage\r\n  });\r\n  \r\n  export const fetchCollectionsStartAsync = () => {\r\n    return dispatch => {\r\n      const collectionRef = firestore.collection('collection');\r\n      dispatch(fetchCollectionsStart());\r\n      collectionRef\r\n        .get()\r\n        .then(snapshot => {\r\n          const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n          dispatch(fetchCollectionsSuccess(collectionsMap));\r\n        })\r\n        .catch(error => dispatch(fetchCollectionsFailure(error.message)));\r\n    };\r\n  };\r\n\r\n// export const fetchCollectionStart = () => ({\r\n//     type: ShopActionTypes.FETCH_COLLECTION_START,\r\n// })\r\n\r\n// export const fetchCollectionSuccess = collectionMap => ({\r\n//     type: ShopActionTypes.FETCH_COLLECTION_SUCCESS,\r\n//     payload: collectionMap\r\n// })\r\n\r\n// export const fetchCollectionFailure = errorMessage =>({\r\n//     type: ShopActionTypes.FETCH_COLLECTION_ERROR,\r\n//     payload: errorMessage\r\n// })\r\n\r\n// export const fetchCollectionStartAsync = () => {\r\n//     return dispatch => {\r\n//         const collectionRef = firestore.collection('collections')\r\n//         dispatch(fetchCollectionStart())\r\n//         collectionRef\r\n//         .get()\r\n//         .then(snapshot => {\r\n//             const collectionMap = convertCollectionsSnapshotToMap(snapshot)\r\n//             console.log(collectionMap);\r\n            \r\n//             dispatch(fetchCollectionSuccess(collectionMap))\r\n\r\n//         }).catch(error =>dispatch(fetchCollectionFailure(error.message)))\r\n//     }\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}